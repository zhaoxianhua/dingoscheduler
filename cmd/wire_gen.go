// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"dingoscheduler/internal/dao"
	"dingoscheduler/internal/data"
	"dingoscheduler/internal/handler"
	"dingoscheduler/internal/router"
	"dingoscheduler/internal/server"
	"dingoscheduler/internal/service"
	"dingoscheduler/pkg/app"
	"dingoscheduler/pkg/config"
)

import (
	_ "net/http/pprof"
)

// Injectors from wire.go:

func wireApp(configConfig *config.Config) (*app.App, func(), error) {
	echo := server.NewEngine()
	baseData, cleanup, err := data.NewBaseData(configConfig)
	if err != nil {
		return nil, nil, err
	}
	dingospeedDao := dao.NewDingospeedDao(baseData)
	modelFileRecordDao := dao.NewModelFileRecordDao(baseData)
	modelFileProcessDao := dao.NewModelFileProcessDao(baseData)
	schedulerService := service.NewSchedulerService(dingospeedDao, modelFileRecordDao, modelFileProcessDao)
	preheatJobDao := dao.NewPreheatJobDao(baseData)
	preheatJobService := service.NewPreheatJobService(dingospeedDao, modelFileProcessDao, preheatJobDao)
	repositoryDao := dao.NewRepositoryDao(baseData)
	tagDao := dao.NewTagDao(baseData)
	repositoryService := service.NewRepositoryService(dingospeedDao, modelFileProcessDao, repositoryDao, tagDao)
	managerHandler := handler.NewManagerHandler(schedulerService, preheatJobService, repositoryService)
	sysService := service.NewSysService()
	sysHandler := handler.NewSysHandler(sysService)
	alayanewHandler := handler.NewAlayanewHandler(repositoryService)
	httpRouter := router.NewHttpRouter(echo, managerHandler, sysHandler, alayanewHandler)
	httpServer := server.NewHTTPServer(configConfig, httpRouter)
	schedulerServer := server.NewSchedulerServer(schedulerService)
	appApp := newApp(httpServer, schedulerServer)
	return appApp, func() {
		cleanup()
	}, nil
}
